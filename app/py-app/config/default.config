[cltl.language]
language:nl

[cltl.triple_extraction]
#implementation: CFGAnalyzer, CFGQuestionAnalyzer, ConversationalAnalyzer, ConversationalQuestionAnalyzer
implementation: ConversationalAnalyzer, CFGQuestionAnalyzer
timeout: 15
intentions:
topic_intention:
topic_input : cltl.topic.text_in
topic_agent : cltl.topic.text_out
topic_output : cltl.topic.triple_extraction
topic_scenario : cltl.topic.scenario

[cltl.triple_extraction.conversational]
model_path: resources/conversational_triples
base_model: google-bert/bert-base-multilingual-cased
#base_model: albert-base-v2
language: en
threshold: 0.4
max_triples: 10
batch_size: 4

[cltl.entity_linking]
address: http://localhost:7200/repositories/sandbox
log_dir: ./storage/rdf
implementations: NamedEntityLinker
topic_scenario : cltl.topic.scenario
topic_input : cltl.topic.triple_extraction
topic_output : cltl.topic.knowledge

[cltl.brain]
address: http://localhost:7200/repositories/sandbox
log_dir: ./storage/rdf
clear_brain : False
topic_input : cltl.topic.knowledge
topic_output : cltl.topic.brain_response

[cltl.reply_generation]
#implementations: SimpleNLGReplier, LenkaReplier, LlamaReplier
implementations: LenkaReplier
utterance_types: question, statement, text_mention
thought_options: _overlaps, _complement_conflict, _negation_conflicts, _statement_novelty, _entity_novelty, _subject_gaps, _complement_gaps
randomness: 0.25
paraphrase: True
instruct= {'role':'assistant', 'content':'Paraphrase the statement or question from the user in plain English.'}
#instruct= {'role':'assistant', 'content':'Paraphrase the statement or question from the user in plain Dutch.'}
#model= llama3.2:1b
model= llama3.2
temperature=0.5
max_tokens=100
topic_input : cltl.topic.brain_response
topic_output : cltl.topic.text_out
intentions:
topic_intention:

[cltl.emotion_recognition]
impl: Go

[cltl.emotion_recognition.go]
model: bhadresh-savani/bert-base-go-emotion

[cltl.emotion_recognition.events]
intentions: chat
topic_intention: cltl.topic.intention
topic_input: cltl.topic.chat_text_in
topic_output: cltl.topic.emotion

[cltl.dialogue_act_classification]
implementation: midas

[cltl.dialogue_act_classification.midas]
model: resources/midas-da-xlmroberta/pytorch_model.bin

[cltl.dialogue_act_classification.events]
intentions: chat
topic_intention: cltl.topic.intention
topic_inputs : cltl.topic.chat_text_in, cltl.topic.text_out
topic_output : cltl.topic.dialogue_act

[cltl.chat-ui]
name: chat-ui
agent_id: leolani
external_input: True
timeout: 10

[cltl.chat-ui.events]
local: True
topic_utterance: cltl.topic.text_in
topic_response: cltl.topic.text_out, text_out_chatonly
topic_scenario : cltl.topic.scenario
topic_desire : cltl.topic.desire

[cltl.context]
topic_scenario: cltl.topic.scenario

[cltl.event.kombu]
server: amqp://localhost:5672
exchange: cltl.combot
type: direct
compression: bzip2

[cltl.event_log]
log_dir: ./storage/event_log

[cltl.emissor-data]
path: ./storage/emissor

[cltl.emissor-data.event]
topics: cltl.topic.scenario, cltl.topic.text_in, cltl.topic.text_out, cltl.topic.text_out_replier,
        cltl.topic.emotion, cltl.topic.dialogue_act

[environment]
GOOGLE_APPLICATION_CREDENTIALS: config/google_cloud_key.json
